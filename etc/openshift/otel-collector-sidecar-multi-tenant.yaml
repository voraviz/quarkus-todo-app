apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-sidecar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-sidecar
rules:
- apiGroups: ["", "config.openshift.io"]
  resources: ["pods", "namespaces", "infrastructures", "infrastructures/status"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-sidecar
subjects:
- kind: ServiceAccount
  name: otel-collector-sidecar
  namespace: PROJECT
roleRef:
  kind: ClusterRole
  name: otel-collector-sidecar
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
spec:
  mode: sidecar
  observability:
    metrics:
      enableMetrics: true
  config:
    serviceAccount: otel-collector-sidecar
    extensions:
      bearertokenauth:
        filename: "/var/run/secrets/kubernetes.io/serviceaccount/token"
    connectors:
      spanmetrics: 
        metrics_flush_interval: 15s
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      jaeger:
        protocols:
          thrift_binary:  {}
          thrift_compact:  {}
          thrift_http:  {}
          grpc: {}
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 50
        spike_limit_percentage: 30
      k8sattributes: {}
      batch:
        send_batch_size: 10000
        timeout: 10s
      resourcedetection:
        detectors: [openshift]
        timeout: 2s
    exporters:
      otlp/dev:
        endpoint: tempo-simplest-gateway.PROJECT.svc.cluster.local:8090
        tls:
          insecure: true
          insecure_skip_verify: true
          ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"   
          #server_name_override: "tempo-simplest-gateway.PROJECT.svc.cluster.local"
        auth:
          authenticator: bearertokenauth
        headers:
          X-Scope-OrgID: "dev"        
      prometheus: 
        endpoint: 0.0.0.0:8889
        add_metric_suffixes: false
        resource_to_telemetry_conversion:
          enabled: true     
      # debug: {}

    service:
      extensions: [bearertokenauth]
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, batch,k8sattributes,resourcedetection]
          exporters: [otlp/dev, spanmetrics]
        metrics:
          receivers: [spanmetrics]
          exporters: [prometheus]
#     config: |
#       connectors:
#         spanmetrics: 
#           metrics_flush_interval: 15s
#       extensions:
#         bearertokenauth:
#           filename: "/var/run/secrets/kubernetes.io/serviceaccount/token"
#       processors:
#         batch:
#         memory_limiter:
#           check_interval: 1s
#           limit_percentage: 50
#           spike_limit_percentage: 30
#         resourcedetection:
#           detectors: [openshift]
#           timeout: 2s
#       exporters:
#         # Export the dev tenant traces to a Tempo instance
#         otlp/dev:
#           endpoint: tempo-simplest-gateway.PROJECT.svc.cluster.local:8090
#           tls:
#             insecure: false
#             ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
#           auth:
#             authenticator: bearertokenauth
#           headers:
#             X-Scope-OrgID: "dev"
        
#         # The Prometheus exporter is used to export metrics in the Prometheus format.
#         prometheus: 
#           endpoint: 0.0.0.0:8889
#           add_metric_suffixes: false
#           resource_to_telemetry_conversion:
#             enabled: true

#       receivers:
#         otlp:
#           protocols:
#             grpc:
#             http:
#         jaeger:
#           protocols:
#             thrift_binary:
#             thrift_compact:
#             thrift_http:
#             grpc:

#       service:
#         extensions: [bearertokenauth]
#         pipelines:
#           traces:
#             receivers: [otlp, jaeger]
#             exporters: [otlp/dev, spanmetrics]
#             processors: [memory_limiter, resourcedetection, batch]
#           metrics:
#            receivers: [spanmetrics] 
#            exporters: [prometheus]
---